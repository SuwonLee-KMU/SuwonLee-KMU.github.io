---
Author: Suwon Lee
Date: June 10, 2022 11:44:48 AM GMT+9
title: "Tensorflow-probability ODE Solver 사용하기"
categories: tensorflow
---

1. Stiff ODE Solver (`BDF`) 이 Non-stiff ODE Solver (`DormandPrince`) 보다 느리다.
2. `GradientTape`을 계산하는 경우 그렇지 않은 경우보다 느리다.

## 1. 모델 만들기

다음과 같은 형태로 subclassing API를 사용해서 ODE Solver 모델을 만들어 사용하는 경우를 생각하자.

```python
class SimNet(tf.keras.layers.Layer): # tf.keras.Model 로 해도 된다.
    def __init__(self):
        super(SimNet, self).__init__()

    def call(self, input_tensor): # X.shape(nb, nk)
        return tf.map_fn(self.solve_ode, input_tensor)

    @staticmethod
    def simple_ode(t, x, parameters):
        a = parameters[0]
        b = parameters[1]
        dx = tf.add(tf.multiply(b, tf.exp(tf.multiply(a, t))), tf.multiply(a, x))
        return dx

    def solve_ode(self, parameters):
        t_init, t_fin = 0., 4.
        y_init = 0.
        parameters = tf.expand_dims(parameters,axis=-1) # ZeroDivisionError가 발생하는 경우, 추가.
        with tf.GradientTape() as tape:
            tape.watch(parameters)
            solution_times = tf.linspace(0,4,41)
            solution = tfp.math.ode.DormandPrince().solve(
                self.simple_ode,
                t_init, y_init, solution_times=solution_times,
                constants={'parameters': parameters}
            )
            tape.gradient(solution.states, parameters)
        return solution.states

```

### A. Methods

`call(self, input_tensor)` 

- 모델을 evaluation하는 메서드. 입력으로 주어지는 텐서는 배치로 들어오기 때문에 `tf.map_fn()` 함수를 사용해서 배치 내 각 텐서마다 연산(여기서는 수치적분)을 수행하도록 한다.

`simple_ode(t, x, parameters)`

- 수치적분을 수행할 미분방정식을 정의한다, 처음 두 입력값은 시간 `t`와 상태변수벡터 `x`이며, 이외의 변수는 `parameter`로 전달한다.
- 출력으로 `dx` 를 반환한다.

`solve_ode(self, parameters)`

- 이 메서드 내부에서 수치적분이 실행된다. 가장 핵심이 되는 부분은 :
  `solution = tfp.math.ode.DormandPrince().Solve()` 함수를 실행하는 부분이다.
  Stiff ODE인 경우, `DormandPrince()`대신 `BDF()`를 사용해서 더 정확히 수치적분을 수행할 수 있다.
- 상태변수 초기값, 시간, 값을 출력할 시간구간 등을 지정할 수 있다.
- 시간과 상태변수 이외의 추가 파라미터를 전달할 수 있다. `constants=` 키워드에 딕셔너리 형태로 입력값을 전달하면 된다.
- `with tf.GradientTape() as tape:` 구문을 볼 수 있다. 시뮬레이션 결과로 나오는 상태변수 등에 대한 그래디언트를 계산해야 할 필요가 있는 경우 사용한다. 필요없는 경우 이 구문을 빼면 계산속도가 매우 빨라진다. (아래 구문 예시 참조)

```python
def solve_ode(self, parameters):
  t_init, t_fin = 0., 4.
  y_init = 0.
  solution_times = tf.linspace(0,4,41)
  solution = tfp.math.ode.DormandPrince().solve(
    self.simple_ode,
    t_init, y_init, solution_times=solution_times,
    constants={'parameters': parameters}
    )
  return solution.states
```

